import kotlin.Boolean;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE movie_ (
    id INTEGER PRIMARY KEY NOT NULL,
    title TEXT NOT NULL,
    overview TEXT NOT NULL,
    genres TEXT AS List<String>,
    genreIds TEXT AS List<Int>,
    original_language TEXT,
    vote_count INTEGER,
    release_date TEXT,
    poster_url TEXT,
    poster_last_updated INTEGER NOT NULL DEFAULT 0,
    favorite INTEGER AS Boolean NOT NULL DEFAULT 0,
    externalUrl TEXT,
    popularity REAL,
    status INTEGER,
    production_companies TEXT AS List<String>,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    favorite_modified_at INTEGER
);

CREATE INDEX library_favorite_index ON movie_(favorite) WHERE favorite = 1;

CREATE TRIGGER update_last_favorite_at_movies
AFTER UPDATE OF favorite ON movie_
BEGIN
  UPDATE movie_
  SET favorite_modified_at = strftime('%s', 'now')
  WHERE id = new.id;
END;

CREATE TRIGGER delete_movie_from_lists
AFTER DELETE ON movie_
FOR EACH ROW
BEGIN
  DELETE FROM contentItem
  WHERE movie_id = old.id;
END;

CREATE TRIGGER update_last_modified_at_movies
AFTER UPDATE ON movie_
FOR EACH ROW
BEGIN
  UPDATE movie_
  SET last_modified_at = strftime('%s', 'now')
  WHERE id = new.id;
END;

selectFavorites:
SELECT
    m.*,
    (
       SELECT DISTINCT COUNT(contentItem.list_id)
       FROM contentItem
       LEFT JOIN contentList ON contentItem.list_id = contentList._id
       WHERE movie_id = id AND contentList.in_library
    ) AS inLibraryLists
FROM movie_ m WHERE favorite AND (title LIKE :query OR :query = '');

selectById:
SELECT movie_.*,
(
   SELECT DISTINCT COUNT(contentItem.list_id)
   FROM contentItem
   LEFT JOIN contentList ON contentItem.list_id = contentList._id
   WHERE movie_id = id AND contentList.in_library
)
FROM movie_ WHERE id = :id LIMIT 1;


selectMoviePartialById:
SELECT id, title, poster_url, poster_last_updated, favorite, last_modified_at, popularity,overview,
(
   SELECT DISTINCT COUNT(contentItem.list_id)
   FROM contentItem
   LEFT JOIN contentList ON contentItem.list_id = contentList._id
   WHERE movie_id = id AND contentList.in_library
) FROM movie_ WHERE id = :id LIMIT 1;

selectAll:
SELECT * FROM movie_;

insert:
INSERT OR IGNORE INTO movie_(id, title, overview, genres, genreIds, original_language, vote_count, release_date, poster_url, poster_last_updated, favorite, externalUrl, popularity, status, production_companies, last_modified_at)
VALUES (:id, :title,:overview,:genres, :genreIds,:originalLanguage,:voteCount,:releaseDate, :posterUrl, :posterLastUpdated, :favorite, :externalUrl, :popularity, :status, :productionCompanies, strftime('%s', 'now'));

lastInsertRowId:
SELECT last_insert_rowid();

update:
UPDATE movie_ SET
    title = COALESCE(:title, title),
    overview = COALESCE(:overview, overview),
    genres = COALESCE(:genres, genres),
    genreIds = COALESCE(:genreIds, genreIds),
    original_language = COALESCE(:originalLanguage, original_language),
    vote_count = COALESCE(:voteCount, vote_count),
    release_date = COALESCE(:releaseDate, release_date),
    poster_url = COALESCE(:posterUrl, poster_url),
    poster_last_updated = COALESCE(:posterLastUpdated, poster_last_updated),
    favorite = COALESCE(:favorite, favorite),
    externalUrl = COALESCE(:externalUrl, externalUrl),
    popularity = COALESCE(:popularity, popularity),
    status = COALESCE(:status, status),
    production_companies = COALESCE(:productionCompanies, production_companies)
WHERE id = :movieId;