CREATE TABLE contentItem(
    movie_id INTEGER NOT NULL DEFAULT -1,
    show_id INTEGER NOT NULL DEFAULT -1,
    list_id INTEGER NOT NULL,
    created_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),
    PRIMARY KEY(movie_id, show_id, list_id),
    FOREIGN KEY (list_id) REFERENCES contentList(_id) ON DELETE CASCADE
);


CREATE TRIGGER update_last_modified_at_list_insert
AFTER INSERT ON contentItem
FOR EACH ROW
BEGIN
  UPDATE contentList
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = new.list_id;
END;


CREATE TRIGGER update_last_modified_at_list_delete
AFTER DELETE ON contentItem
FOR EACH ROW
BEGIN
  UPDATE contentList
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = old.list_id;
END;

CREATE INDEX list_id_index ON contentItem(list_id);
CREATE INDEX show_id_index ON contentItem(show_id);
CREATE INDEX movie_id_index ON contentItem(movie_id);

insert:
INSERT OR IGNORE INTO contentItem(movie_id, show_id, list_id, created_at)
VALUES (:movieId, :showId, :listId, IFNULL(:createdAt, strftime('%s', 'now')));

deleteMovieFromList:
DELETE FROM contentItem WHERE movie_id = :movieId AND list_id = :listId;

deleteShowFromList:
DELETE FROM contentItem WHERE show_id = :showId AND list_id = :listId;

selectMoviesByListId:
SELECT
    clj.*,
    m.id AS movieId,
    clj.show_id AS showId,
    m.title AS title,
    m.poster_url AS posterUrl,
    m.poster_last_updated AS posterLastUpdated,
    m.favorite AS favorite,
    m.overview  AS overview,
    m.popularity AS popularity,
    (
       SELECT DISTINCT COUNT(contentItem.list_id)
       FROM contentItem
       WHERE movie_id = m.id
       AND (
          SELECT in_library FROM contentList WHERE contentList._id = contentItem.list_id
          LIMIT 1
      )
    ) AS inLists
FROM contentItem AS clj
LEFT JOIN movie_ AS m
ON m.id = clj.movie_id
WHERE list_id = :listId AND movie_id != -1
AND (
    m.title LIKE :query
    OR :query = ''
);


selectShowsByListId:
SELECT
    clj.*,
    clj.movie_id AS movieId,
    s.id AS showId,
    s.title AS title,
    s.poster_url AS posterUrl,
    s.poster_last_updated AS posterLastUpdated,
    s.favorite AS favorite,
    s.overview  AS overview,
    s.popularity AS popularity,
    (
        SELECT DISTINCT COUNT(contentItem.list_id)
        FROM contentItem
        WHERE show_id = s.id
        AND (
            SELECT in_library FROM contentList WHERE contentList._id = contentItem.list_id
            LIMIT 1
        )
    ) AS inLists
FROM contentItem AS clj
LEFT JOIN show AS s
ON s.id = clj.show_id
WHERE list_id = :listId AND show_id != -1
AND (
    s.title LIKE :query
    OR :query = ''
);

selectByListIdAsc:
SELECT
    clj.*,
    m.id AS movieId,
    s.id AS showId,
    COALESCE(m.title, s.title) AS title,
    COALESCE(m.poster_url, s.poster_url) AS posterUrl,
    COALESCE(m.poster_last_updated, s.poster_last_updated) AS posterLastUpdated,
    COALESCE(m.favorite, s.favorite) AS favorite,
    COALESCE(m.overview, s.overview) AS overview,
    COALESCE(m.popularity, s.popularity) AS popularity,
    (
      SELECT DISTINCT COUNT(contentItem.list_id)
      FROM contentItem
      WHERE show_id = s.id OR movie_id = m.id
      AND (
        SELECT in_library FROM contentList WHERE contentList._id = contentItem.list_id
        LIMIT 1
      )
    ) AS inLists
FROM contentItem AS clj
LEFT JOIN movie_ AS m
ON m.id = clj.movie_id AND movie_id != -1
LEFT JOIN show AS s
ON s.id = clj.show_id AND show_id != -1
WHERE
    list_id = :listId
AND (
    COALESCE(m.title, s.title) LIKE :query
    OR :query = ''
)
ORDER BY
     CASE :order
        WHEN 'title'
            THEN COALESCE(s.title, m.title)
        WHEN 'popularity'
            THEN COALESCE(s.popularity, m.popularity)
        ELSE
            created_at
     END
ASC
;

selectByListId:
SELECT
    clj.*,
    m.id AS movieId,
    s.id AS showId,
    COALESCE(m.title, s.title) AS title,
    COALESCE(m.poster_url, s.poster_url) AS posterUrl,
    COALESCE(m.poster_last_updated, s.poster_last_updated) AS posterLastUpdated,
    COALESCE(m.favorite, s.favorite) AS favorite,
    COALESCE(m.overview, s.overview) AS overview,
    COALESCE(m.popularity, s.popularity) AS popularity,
    (
      SELECT DISTINCT COUNT(contentItem.list_id) FROM contentItem
      WHERE show_id = s.id OR movie_id = m.id
      AND (
           SELECT in_library FROM contentList WHERE contentList._id = contentItem.list_id
           LIMIT 1
     )
    ) AS inLists
FROM contentItem AS clj
LEFT JOIN movie_ AS m
ON m.id = clj.movie_id AND movie_id != -1
LEFT JOIN show AS s
ON s.id = clj.show_id AND show_id != -1
WHERE
    list_id = :listId
AND (
    COALESCE(m.title, s.title) LIKE :query
    OR :query = ''
)
ORDER BY
     CASE :order
        WHEN 'title'
            THEN COALESCE(s.title, m.title)
        WHEN 'popularity'
            THEN COALESCE(s.popularity, m.popularity)
        ELSE
            created_at
     END
DESC
;